import pandas as pd
from sklearn import datasets
from evidently.report import Report
from evidently.metric_preset import DataDriftPreset, DataQualityPreset, TargetDriftPreset
import pickle
import os
from evidently.test_suite import TestSuite
from evidently.tests import *

# Carica il dataset di training dal file .pkl
with open(f'{os.getcwd()}/data/processed/tokenized_train.pkl', 'rb') as file:
    dataset = pickle.load(file)

dataset = pd.DataFrame(dataset)
dataset_filtered = dataset[['da', 'en']]
# print(dataset['da'][:20])
# print(dataset['en'][:20])
#dataset_filtered.to_csv(f'{os.getcwd()}/monitoring/datasettt.csv', index=False)
ref = pd.DataFrame(dataset_filtered[:250])
cur = pd.DataFrame(dataset_filtered[250:500])

# #load dataset generated by user's predictions
# current_data = pd.read_csv('prediction_database.csv')


#create evidently reports
#TargetDriftPreset check target drift, that means that the distribution of predicted values differs from the ground true distribution of targets
report = Report(metrics=[DataDriftPreset(), DataQualityPreset(), TargetDriftPreset()])
report.run(reference_data= ref, current_data = cur)
report.save_html(f'{os.getcwd()}/monitoring/reports/report.html')

#dataset level quality tests
data_integrity_dataset_tests = TestSuite(tests=[
    TestNumberOfColumns(),
    TestNumberOfRows(),
    TestNumberOfMissingValues(),
    TestShareOfMissingValues(),
    TestNumberOfColumnsWithMissingValues(),
    TestNumberOfRowsWithMissingValues(),
    TestShareOfColumnsWithMissingValues(),
    TestShareOfRowsWithMissingValues(),
    TestNumberOfDifferentMissingValues(),
    TestNumberOfConstantColumns(),
    TestNumberOfEmptyRows(),
    TestNumberOfEmptyColumns(),
    TestNumberOfDuplicatedRows(),
    TestNumberOfDuplicatedColumns(),
    TestColumnsType(),
    ])
data_integrity_dataset_tests.run(reference_data=ref, current_data=cur)
data_integrity_dataset_tests.save_html(f'{os.getcwd()}/monitoring/reports/data_integrity_dataset_tests.html')

#dataset-level data drifting tests
data_drift_dataset_tests = TestSuite(tests=[
    TestNumberOfDriftedColumns(),
    TestShareOfDriftedColumns(),
])

data_drift_dataset_tests.run(reference_data=ref, current_data=cur)
data_drift_dataset_tests.save_html(f'{os.getcwd()}/monitoring/reports/data_drift_dataset_tests.html')
